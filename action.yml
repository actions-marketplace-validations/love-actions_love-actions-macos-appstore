name: Love actions for macOS AppStore
description: macOS AppStore CI/CD for LÖVE based games
branding:
  icon: "heart"
  color: "yellow"
inputs:
  app-name:
    description: |
      App display name
      Would be used in platform/xcode/macosx/love-macosx.plist
    required: false
    default: "LÖVE for macOS"
  bundle-id:
    description: |
      App bundle id
      Would be used in platform/xcode/love.xcodeproj/project.pbxproj
    required: false
    default: "org.love2d.macOS"
  copyright:
    description: |
      App copyright info
      Would be used in platform/xcode/macosx/love-macosx.plist
    required: false
  icon-path:
    description: |
      Icon path
      Should be .icns format
      Would be used in platform/xcode/Images.xcassets/OS X AppIcon.appiconset
    required: true
    default: "./icon.icns"
  love-ref:
    description: |
      LÖVE git ref
      Could be commit hash, tags or branch name
    required: false
    default: "c35356c841976eb6f370347b81eec845d5520338"
  love-patch:
    description: |
      Git patch file path for the LÖVE repo
      The patch must start from `love-ref`
      You can use `git diff` to get the patch file
    required: false
  love-package:
    description: |
      Love package
      Would be used to assemble the executable
    required: false
    default: "./game.love"
  libs-path:
    description: |
      Path to the libs folder
      Would copy all contents to platform/xcode/
      Top folder not included
    required: false
  extra-assets:
    description: |
      List of file paths to be added to `Copy Bundle Resources` build phase
      Don't need global quotes, separated by spaces
      Looks like: ./assets/ ./logics/ ./main.lua ./config.lua
    required: false
  product-name:
    description: |
      Base name of the package
      Would be used to rename products
    required: false
    default: "love_app"
  version-string:
    description: |
      App version string
      Use 3 numbers seperated by dots
      Looks like 3.2.1
    required: false
    default: "11.4"
  output-folder:
    description: |
      Packages output folder
      All packages would be placed here
    required: false
    default: "./build"
  apple-development-base64:
    description: |
      Apple Development certificate base64 content
      Would be used to sign the app
    required: true
  apple-development-password:
    description: |
      Apple Distribution certificate password
      Would be used to sign the app
    required: true
  api-key:
    description: |
      App Store Connect API key content
      Would be used to automaticly update profiles, app IDs and certificates
    required: true
  api-key-id:
    description: |
      App Store Connect API key ID
      Would be used to automaticly update profiles, app IDs and certificates
    required: true
  api-issuer-id:
    description: |
      App Store Connect API issuer ID
      Would be used to automaticly update profiles, app IDs and certificates
    required: true
  team-id:
    description: |
      Developer team id
      Would be used to sign the package
    required: true
  apple-id:
    description: |
      App Apple ID
      Would be used to upload the package
    required: true
outputs:
  package-paths:
    description: |
      Paths to the built packages in a bash list
      Would be paths relative to repository root, separated by spaces
      Looks like: ./build/game.pkg
    value: ${{ steps.gather-packages.outputs.package-paths }}
runs:
  using: "composite"
  steps:
    - name: Create directories
      shell: bash
      run: |
        mkdir -p ./love-actions-macos-appstore/
        mkdir -p ${{ inputs.output-folder }}
    - name: Setup environment
      id: setup-env
      shell: python3 {0}
      run: |
        import os
        version_string = "${{ inputs.version-string }}"
        version_segments = version_string.split(".")
        build_version = version_segments[0] + version_segments[1].zfill(2) + version_segments[2].zfill(2)
        attempt = "${{ github.run_attempt }}"
        os.system("echo ::set-output name=bundle-version::" + build_version + ".2.${{ github.run_number }}" + attempt.zfill(2))
    - name: Checkout love
      uses: actions/checkout@v3
      with:
        path: ./love-actions-macos-appstore/love
        ref: ${{ inputs.love-ref }}
        repository: love2d/love
    - name: Apply love patch
      if: "${{ inputs.love-patch != '' }}"
      shell: bash
      run: |
        cp ${{ inputs.love-patch }} ./love-actions-macos-appstore/love/love.patch
        cd ./love-actions-macos-appstore/love
        git apply ./love.patch
    - name: Checkout framework SDK
      uses: actions/checkout@v3
      with:
        path: ./love-actions-macos-appstore/love-apple-dependencies
        ref: 402eed62c2bd654a860bb64544393285fb640497
        repository: love2d/love-apple-dependencies
    - name: Move framework SDK and love package
      shell: bash
      run: |
        mv ./love-actions-macos-appstore/love-apple-dependencies/macOS/Frameworks/ ./love-actions-macos-appstore/love/platform/xcode/macosx
        mv ${{ inputs.love-package }} ./love-actions-macos-appstore/love/platform/xcode/game.love
        mkdir -p ./love-actions-macos-appstore/love/platform/xcode/build/Debug
        mkdir -p ./love-actions-macos-appstore/love/platform/xcode/build/Release
    - name: Copy extra assets
      if: "${{ inputs.extra-assets != '' }}"
      shell: bash
      run: |
        cp -r -f ${{ inputs.extra-assets }} ./love-actions-macos-appstore/love/platform/xcode/
    - name: Process icons
      shell: bash
      run: |
        rm -rf ./love-actions-macos-appstore/love/platform/xcode/Images.xcassets/OS\ X\ AppIcon.appiconset/*.png
        iconutil -c iconset -o ./love-actions-macos-appstore/icon.iconset ${{ inputs.icon-path }}
        mv -f ./love-actions-macos-appstore/icon.iconset/* ./love-actions-macos-appstore/love/platform/xcode/Images.xcassets/OS\ X\ AppIcon.appiconset/
    - name: Create API key
      shell: bash
      run: |
        mkdir -p ~/.appstoreconnect/private_keys/
        echo -n "${{ inputs.api-key }}" > ~/.appstoreconnect/private_keys/AuthKey_${{ inputs.api-key-id }}.p8
    - name: Create keychain and import certificates
      env:
        CERTIFICATE_PATH: ./love-actions-macos-appstore/cert.p12
        KEYCHAIN_PASSWORD: build_keychain_password
        KEYCHAIN_PATH: ./love-actions-macos-appstore/build.keychain
      shell: bash
      run: |
        security create-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security default-keychain -s $KEYCHAIN_PATH
        security unlock-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH

        echo -n "${{ inputs.apple-development-base64 }}" | base64 --decode --output $CERTIFICATE_PATH
        security import $CERTIFICATE_PATH -A -f pkcs12 -k $KEYCHAIN_PATH -P "${{ inputs.apple-development-password }}" -t cert
        rm $CERTIFICATE_PATH

        security set-key-partition-list -S apple-tool:,apple:,codesign:,productbuild:,productsign: -s -k $KEYCHAIN_PASSWORD $KEYCHAIN_PATH
    - name: Update XCode project
      shell: bash
      run: |
        npm i plist xcode node-app-store-connect-api

        cat <<EOT >> update.js
        const fs = require('fs');
        const path = require('path');
        const plist = require('plist');
        const xcode = require('xcode');

        const configuration = null;

        const liblovePbxprojPath = './love-actions-macos-appstore/love/platform/xcode/liblove.xcodeproj/project.pbxproj';
        const libloveProject = xcode.project(liblovePbxprojPath).parseSync();
        const libloveTarget = 'liblove-macosx'
        libloveProject.updateBuildProperty('MACOSX_DEPLOYMENT_TARGET', '10.9', configuration, libloveTarget);
        fs.writeFileSync(liblovePbxprojPath, libloveProject.writeSync());

        const lovePbxprojPath = './love-actions-macos-appstore/love/platform/xcode/love.xcodeproj/project.pbxproj';
        const loveProject = xcode.project(lovePbxprojPath).parseSync();
        const loveTarget = 'love-macosx'
        loveProject.updateBuildProperty('CODE_SIGN_IDENTITY', '"Apple Development"', configuration, loveTarget);
        loveProject.updateBuildProperty('CODE_SIGN_STYLE', '"Automatic"', configuration, loveTarget);
        loveProject.updateBuildProperty('CURRENT_PROJECT_VERSION', '${{ steps.setup-env.outputs.bundle-version }}', configuration, loveTarget);
        loveProject.updateBuildProperty('DEVELOPMENT_TEAM', '${{ inputs.team-id }}', configuration, loveTarget);
        loveProject.updateBuildProperty('MACOSX_DEPLOYMENT_TARGET', '10.9', configuration, loveTarget);
        loveProject.updateBuildProperty('MARKETING_VERSION', '${{ inputs.version-string }}', configuration, loveTarget);
        loveProject.updateBuildProperty('PRODUCT_BUNDLE_IDENTIFIER', '${{ inputs.bundle-id }}', configuration, loveTarget);
        loveProject.updateBuildProperty('PRODUCT_NAME', '${{ inputs.product-name }}', configuration, loveTarget);
        loveProject.updateBuildProperty('PROVISIONING_PROFILE_SPECIFIER', '""', configuration, loveTarget);
        loveProject.addResourceFile(
            './game.love',
            {target: loveProject.findTargetKey('"' + loveTarget + '"')},
            loveProject.findPBXGroupKey({name: 'Resources'})
        );
        const extraAssets = '${{ inputs.extra-assets }}';
        if (extraAssets !== '') {
            extraAssets.split(' ').forEach(filename => {
                loveProject.addResourceFile(
                    filename,
                    {target: loveProject.findTargetKey('"' + loveTarget + '"')},
                    loveProject.findPBXGroupKey({name: 'Resources'})
                );
            });
        }
        const libFolder = '${{ inputs.libs-path }}';
        if (libFolder !== '') {
            fs.readdirSync(libFolder).forEach(filename => {
                fs.copyFileSync(
                    path.join(libFolder, filename),
                    path.join('./love-actions-macos-appstore/love/platform/xcode', filename)
                );
                if (path.extname(filename) === '.a') {
                    loveProject.addStaticLibrary(
                        filename,
                        {target: loveProject.findTargetKey('"' + loveTarget + '"')}
                    );
                    loveProject.removeFromLibrarySearchPaths({path: filename})
                } else if (path.extname(filename) === '.dylib') {
                    const dylibFile = loveProject.addFile(
                        filename,
                        loveProject.findPBXGroupKey({name: 'love'}),
                        {
                            customFramework: true,
                            target: loveProject.findTargetKey('"' + loveTarget + '"')
                        }
                    );
                    dylibFile.group = 'Copy Frameworks';
                    dylibFile.path = './' + filename;
                    dylibFile.settings = '{ATTRIBUTES = (CodeSignOnCopy, ); }';
                    dylibFile.uuid = loveProject.generateUuid();
                    loveProject.addToPbxBuildFileSection(dylibFile);
                    loveProject.buildPhaseObject(
                        'PBXCopyFilesBuildPhase',
                        'Copy Frameworks',
                        loveProject.findTargetKey('"' + loveTarget + '"')
                    ).files.push({
                        value: dylibFile.uuid,
                        comment: dylibFile.basename + ' in ' + dylibFile.group
                    });
                }
            });
            loveProject.addToLibrarySearchPaths('"$' + '(PROJECT_DIR)"');
        }
        fs.writeFileSync(lovePbxprojPath, loveProject.writeSync());

        const infoPath = './love-actions-macos-appstore/love/platform/xcode/macosx/love-macosx.plist';
        const infoPlist = plist['parse'](fs.readFileSync(infoPath, 'utf8'));
        infoPlist['CFBundleExecutable'] = '${{ inputs.product-name }}';
        infoPlist['CFBundleName'] = '${{ inputs.app-name }}';
        infoPlist['CFBundleShortVersionString'] = '${{ inputs.version-string }}';
        infoPlist['CFBundleVersion'] = '${{ steps.setup-env.outputs.bundle-version }}';
        infoPlist['ITSAppUsesNonExemptEncryption'] = false;
        infoPlist['NSHumanReadableCopyright'] = '${{ inputs.copyright }}';
        delete infoPlist['CFBundleDocumentTypes'];
        delete infoPlist['UTExportedTypeDeclarations'];
        fs.writeFileSync(infoPath, plist['build'](infoPlist));

        const entitlementsPath = './love-actions-macos-appstore/love/platform/xcode/love.entitlements';
        const entitlementsPlist = plist['parse'](fs.readFileSync(entitlementsPath, 'utf8'));
        entitlementsPlist['com.apple.security.app-sandbox'] = true;
        fs.writeFileSync(entitlementsPath, plist['build'](entitlementsPlist));

        const freetypeInfoPath = './love-actions-macos-appstore/love/platform/xcode/macosx/Frameworks/freetype.framework/Resources/Info.plist';
        const freetypeInfoPlist = plist['parse'](fs.readFileSync(freetypeInfoPath, 'utf8'));
        freetypeInfoPlist['CFBundleIdentifier'] = 'org.freetype.freetype';
        fs.writeFileSync(freetypeInfoPath, plist['build'](freetypeInfoPlist));

        const exportPlistPath = './love-actions-macos-appstore/love/platform/xcode/macosx/macos-copy-app.plist';
        const exportPlist = plist['parse'](fs.readFileSync(exportPlistPath, 'utf8'));
        exportPlist['method'] = 'app-store';
        fs.writeFileSync(exportPlistPath, plist['build'](exportPlist));

        const iconPath = './love-actions-macos-appstore/love/platform/xcode/Images.xcassets/OS X AppIcon.appiconset/Contents.json';
        const iconContents = JSON.parse(fs.readFileSync(iconPath, 'utf8'));
        iconContents.images.forEach(image => {
            image.filename = 'icon_' + image.size + (image.scale === '2x' ? '@2x' : '') + '.png';
        });
        fs.writeFileSync(iconPath, JSON.stringify(iconContents));

        console.info('Project info updated.');
        EOT

        node update.js
        rm update.js
    - name: Build MacOS app
      env:
        API_KEY_PATH: ~/.appstoreconnect/private_keys/AuthKey_${{ inputs.api-key-id }}.p8
        ARCHIVE_PATH: ./love-actions-macos-appstore/archive.xcarchive
        KEYCHAIN_PASSWORD: build_keychain_password
        KEYCHAIN_PATH: ./love-actions-macos-appstore/build.keychain
      shell: bash
      run: |
        security unlock-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH

        xcodebuild clean archive -quiet -allowProvisioningUpdates \
        -authenticationKeyPath $API_KEY_PATH \
        -authenticationKeyID ${{ inputs.api-key-id }} \
        -authenticationKeyIssuerID ${{ inputs.api-issuer-id }} \
        -project ./love-actions-macos-appstore/love/platform/xcode/love.xcodeproj \
        -scheme love-macosx \
        -configuration Release \
        -destination 'generic/platform=macOS' \
        -archivePath ${{ env.ARCHIVE_PATH }} \
        OTHER_CFLAGS="-Wno-everything" \
        OTHER_CODE_SIGN_FLAGS="--deep --force --generate-entitlement-der --strict --timestamp --options runtime"

        xcodebuild -exportArchive -allowProvisioningUpdates \
        -authenticationKeyPath $API_KEY_PATH \
        -authenticationKeyID ${{ inputs.api-key-id }} \
        -authenticationKeyIssuerID ${{ inputs.api-issuer-id }} \
        -archivePath ${{ env.ARCHIVE_PATH }} \
        -exportPath ./love-actions-macos-appstore/ \
        -exportOptionsPlist ./love-actions-macos-appstore/love/platform/xcode/macosx/macos-copy-app.plist
    - name: Move installer pkg and logs
      shell: bash
      run: |
        mv "./love-actions-macos-appstore/${{ inputs.app-name }}.pkg" "${{ inputs.output-folder }}/${{ inputs.product-name }}.pkg"
        mv ./love-actions-macos-appstore/DistributionSummary.plist ${{ inputs.output-folder }}
        mv ./love-actions-macos-appstore/ExportOptions.plist ${{ inputs.output-folder }}
        mv ./love-actions-macos-appstore/Packaging.log ${{ inputs.output-folder }}
    - name: Upload package
      uses: nick-fields/retry@v2
      with:
        max_attempts: 5
        retry_wait_seconds: 5
        timeout_minutes: 20
        command: |
          xcrun altool --upload-package ${{ inputs.output-folder }}/${{ inputs.product-name }}.pkg -t "macos" --apple-id "${{ inputs.apple-id }}" \
          --bundle-version "${{ steps.setup-env.outputs.bundle-version }}" --bundle-short-version-string "${{ inputs.version-string }}" --bundle-id "${{ inputs.bundle-id }}" \
          --apiKey ${{ inputs.api-key-id }} --apiIssuer ${{ inputs.api-issuer-id }} --show-progress
    - name: Gather packages in output folder
      id: gather-packages
      shell: bash
      run: |
        echo ::set-output name=package-paths::$(ls -d ${{ inputs.output-folder }}/*)
    - name: Cleanup
      shell: bash
      run: |
        rm -rf ./love-actions-macos-appstore/
